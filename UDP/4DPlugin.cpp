/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : UDP
 #	author : miyako
 #	2014/06/24
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#ifdef __APPLE__
#include <getopt.h>
#include <arpa/inet.h> 
#else
#include "getopt.h"
#define option option_a
#define getopt_long getopt_long_a
#define optarg optarg_a
#define close closesocket
#pragma comment(lib, "Ws2_32.lib")
#endif
#include <stdio.h>
#include <stdlib.h>
#include <vector>

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
		case kInitPlugin :
		case kServerInitPlugin :
#ifndef __APPLE__	
			WSADATA wsaData;
			WSAStartup(MAKEWORD(2, 2), &wsaData);
			setlocale( LC_ALL, "" );
#endif
			break;	
		case kDeinitPlugin :
		case kServerDeinitPlugin :
#ifndef __APPLE__	
			WSACleanup();
#endif
			break;				
			
// --- Client

		case 1 :
			UDP_GET_SERVER_LIST(pResult, pParams);
			break;

	}
}

// ------------------------------------ Client ------------------------------------

void append(ARRAY_TEXT &array, const char *str){
#ifdef __APPLE__	
	CFStringEncoding encoding = CFStringGetSystemEncoding();
	CFStringRef ustr = CFStringCreateWithCString(kCFAllocatorDefault, str, encoding);
	if(ustr){
		CFIndex ustrlen = CFStringGetMaximumSizeForEncoding(CFStringGetLength(ustr), kCFStringEncodingUTF8);	
		std::vector<char> buf(++ustrlen);
		CFStringGetCString(ustr, (char *)&buf[0], ustrlen, kCFStringEncodingUTF8);
		CUTF8String str((const uint8_t*)&buf[0]);
		array.appendUTF8String(&str);
		CFRelease(ustr);
	}else{
		array.setSize(array.getSize() + 1);
	}
#else
	wchar_t wcs[32];
	memset(wcs, 0, 64);
	if(mbstowcs(wcs, str, strlen(str))){
		CUTF16String str((const PA_Unichar*)wcs);
		array.appendUTF16String(&str);	
	}else{
		array.setSize(array.getSize() + 1);	
	}

#endif	
}

void UDP_GET_SERVER_LIST(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_TEXT Param1;
	ARRAY_TEXT Param2;
	ARRAY_TEXT Param3;
	C_LONGINT Param4;
	C_LONGINT Param5;

	Param4.fromParamAtIndex(pParams, 4);
	Param5.fromParamAtIndex(pParams, 5);

	// --- write the code of UDP_GET_SERVER_LIST here...
	
	Param1.setSize(1);
	Param2.setSize(1);
	Param3.setSize(1);	
	
	int wait = Param4.getIntValue();
	wait = wait ? wait : 1;
	
	int port = Param5.getIntValue();
	port = port ? port : 19813;

#ifdef __APPLE__	
	 int sock;
#else
	SOCKET sock;
#endif		
    if ((sock = socket (AF_INET, SOCK_DGRAM, IPPROTO_UDP)) != -1){
#ifdef __APPLE__	
		int broadcast = 1;
#else
		char broadcast = 1;
#endif
		if (setsockopt (sock, SOL_SOCKET, SO_BROADCAST, &broadcast, sizeof(broadcast)) != 0){
			close (sock);
		}else{
			struct timeval tv;
			tv.tv_sec = wait;
			tv.tv_usec = 0;
			setsockopt (sock, SOL_SOCKET, SO_RCVTIMEO, (char *)&tv, sizeof tv);
			char *ip = (char *)"255.255.255.255";
			char msg[96];
			memset(msg, 0, 96);
			strcpy(&msg[32], "4D Server II");
			struct sockaddr_in si;
			si.sin_family = AF_INET;
			si.sin_port = htons (port);
#ifdef __APPLE__	
			inet_aton (ip, (in_addr *)&si.sin_addr.s_addr);
#else
			si.sin_addr.s_addr = inet_addr(ip);
#endif
			sendto (sock, msg, 96, 0, (struct sockaddr*) &si, sizeof(si));
			char buf[96];
			struct sockaddr_in remaddr;
#ifdef __APPLE__	
			socklen_t addrlen = sizeof (remaddr); 
#else
			int addrlen = sizeof (remaddr); 
#endif
			char host[32];
			char name[32];
			char addr[32];
			
			int recvlen; 
			do{
				PA_YieldAbsolute();
				
				memset(host, 0, 32);
				memset(name, 0, 32);	
				memset(addr, 0, 32);
				
				recvlen	= recvfrom (sock, buf, 96, 0, (struct sockaddr *)&remaddr, &addrlen);
				
				if (recvlen > 0){
					
					strcpy (host, &buf[0]);
					strcpy (name, &buf[64]);				
					strcpy (addr, inet_ntoa(remaddr.sin_addr));
					
					append (Param1, host);
					append (Param2, addr);
					append (Param3, name);
					
				}
			}while(recvlen > 0);	
			close (sock);
		}
	}
	
	Param1.toParamAtIndex(pParams, 1);
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
}

